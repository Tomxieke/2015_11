package replayer;

import java.io.IOException;
import java.util.ArrayList;

import mp3_adapter.MusicBean;
import mylog.Mylog;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnCompletionListener;
import android.os.IBinder;

public class Resevice extends Service {
	private MediaPlayer mMediaPlayer;
	private ArrayList<MusicBean> listData;
	private int posstion; 
	private Intent intent = new Intent(); //服务端广播intent
	
	@Override
	public void onCreate() {
		super.onCreate();
		mMediaPlayer = new MediaPlayer();
	}
	
	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		listData = intent.getParcelableArrayListExtra("MusicBean");
		posstion = intent.getIntExtra("posstion", 0);
		registerReceiver();   //注册广播
		initMusic(listData.get(posstion));
		return super.onStartCommand(intent, flags, startId);
	}
	
	@Override
	public IBinder onBind(Intent intent) {
		// TODO Auto-generated method stub
		return null;
	}
	
	public void getTime(){
		intent.putExtra(Action.MUSIC_TOTAL_TIME, mMediaPlayer.getDuration());  //发送文件播放的总时间
		intent.putExtra(Action.MUSIC_NOW_TIME, mMediaPlayer.getCurrentPosition());  //发送正播放到的时间
		
	}
	
	/*暂停或播放*/
	public void pauseMusic(){
		if(mMediaPlayer.isPlaying()){
			mMediaPlayer.pause();
			intent.setAction(Action.PLAY_STATE_PAUSE);
			sendBroadcast(intent);
		}else{
			mMediaPlayer.start();
			intent.setAction(Action.PLAY_STATE_PLAYINT);
			sendBroadcast(intent);
		}
	}
	
	/*上一曲*/
	public void playLastMusic(){
		if(--posstion < 0){
			posstion = listData.size()-1;
		}
		initMusic(listData.get(posstion));
	}
	
	/*下一曲*/
	public void playNaxtMusic(){
		if(++posstion >= listData.size()){
			posstion = 0;
		}
		initMusic(listData.get(posstion));
	}
	
	/*播放music*/
	public void initMusic(MusicBean m) {
		if (mMediaPlayer != null) {
			try {
				mMediaPlayer.reset(); //重置资源
				mMediaPlayer.setDataSource(m.getMusicPath());
				mMediaPlayer.prepare();
				mMediaPlayer.start();
				
			} catch (IllegalArgumentException e) {
				e.printStackTrace();
			} catch (SecurityException e) {
				e.printStackTrace();
			} catch (IllegalStateException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
			mMediaPlayer.setOnCompletionListener(new OnCompletionListener() {
				@Override
				public void onCompletion(MediaPlayer mp) {
					playNaxtMusic();
				}
			});
		}
	}
	
	
	/*注册广播*/
	public void registerReceiver(){
		Receiver receiver = new Receiver();
		IntentFilter filter = new IntentFilter(Action.PLAY_MUSIC);
		filter.addAction(Action.PAUSE_MUSIC);
		filter.addAction(Action.LAST_MUSIC);
		filter.addAction(Action.NAXT_MUSIC);
		registerReceiver(receiver, filter);
	}
	
	/*定义广播*/
	public class Receiver extends BroadcastReceiver{
		@Override
		public void onReceive(Context context, Intent intent) {
			String action = intent.getAction();
			if(Action.PLAY_MUSIC.equals(action)){
				initMusic(listData.get(posstion));
			}else if(Action.PAUSE_MUSIC.equals(action)){
				pauseMusic();
			}else if(Action.NAXT_MUSIC.equals(action)){
				playNaxtMusic();
			}else if(Action.LAST_MUSIC.equals(action)){
				playLastMusic();
			}
		}
		
	}

	

	
}
