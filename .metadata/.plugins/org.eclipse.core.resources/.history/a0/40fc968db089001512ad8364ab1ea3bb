package replayer;

import java.io.IOException;
import java.util.ArrayList;

import com.example.mp3_player.R;

import mp3_adapter.MusicBean;
import mylog.Mylog;
import android.app.NotificationManager;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnCompletionListener;
import android.os.IBinder;
import android.support.v4.app.NotificationCompat;
import android.widget.RemoteViews;

public class Resevice extends Service {
	private boolean flag = true;   //循环发送进度条的进度
	private MediaPlayer mMediaPlayer;
	private ArrayList<MusicBean> listData;
	private int posstion; 
	private Intent intent = new Intent(); //服务端广播intent
	NotificationManager manager;
	
	@Override
	public void onCreate() {
		super.onCreate();
		mMediaPlayer = new MediaPlayer();
		manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);  //这个可以共用
	}
	
	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		listData = intent.getParcelableArrayListExtra("MusicBean");
		posstion = intent.getIntExtra("posstion", 0);
		registerReceiver();   //注册广播
		initMusic(listData.get(posstion));
		getTime();
		return super.onStartCommand(intent, flags, startId);
	}
	
	@Override
	public IBinder onBind(Intent intent) {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public void onDestroy() {
		super.onDestroy();
		if(receiver != null){
			unregisterReceiver(receiver);
		}
		flag = false;  // 结束发送广播循环
	}
	
	/*刷新进度条的*/
	public void getTime(){
		new Thread(new Runnable() {
			@Override
			public void run() {
				while (flag ) {
					if(mMediaPlayer != null && mMediaPlayer.isPlaying()){
					intent.putExtra(Action.MUSIC_TOTAL_TIME, mMediaPlayer.getDuration());  //发送文件播放的总时间
					intent.putExtra(Action.MUSIC_NOW_TIME,mMediaPlayer.getCurrentPosition()); // 发送正播放到的时间
					intent.setAction(Action.PLAY_TIME);   //发送广播
					sendBroadcast(intent);
					}
				}
				try {
					Thread.sleep(1000); // 每隔一秒发送一次
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		}).start(); 
	}
	
	/*暂停或播放*/
	public void pauseMusic(){
		if(mMediaPlayer.isPlaying()){
			mMediaPlayer.pause();
			intent.setAction(Action.PLAY_STATE_PAUSE);
			sendBroadcast(intent);
		}else{
			mMediaPlayer.start();
			intent.setAction(Action.PLAY_STATE_PLAYINT);
			sendBroadcast(intent);
		}
	}
	
	/*上一曲*/
	public void playLastMusic(){
		if(--posstion < 0){
			posstion = listData.size()-1;
		}
		initMusic(listData.get(posstion));
	}
	
	/*下一曲*/
	public void playNaxtMusic(){
		if(++posstion >= listData.size()){
			posstion = 0;
		}
		initMusic(listData.get(posstion));
	}
	
	/*播放music*/
	public void initMusic(MusicBean m) {
		if (mMediaPlayer != null) {
			try {
				mMediaPlayer.reset(); //重置资源
				mMediaPlayer.setDataSource(m.getMusicPath());
				mMediaPlayer.prepare();
				mMediaPlayer.start();
				
			} catch (IllegalArgumentException e) {
				e.printStackTrace();
			} catch (SecurityException e) {
				e.printStackTrace();
			} catch (IllegalStateException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
			mMediaPlayer.setOnCompletionListener(new OnCompletionListener() {
				@Override
				public void onCompletion(MediaPlayer mp) {
					playNaxtMusic();
				}
			});
		}
	}
	
	Receiver receiver = new Receiver();
	/*注册广播*/
	public void registerReceiver(){
		receiver = new Receiver();
		IntentFilter filter = new IntentFilter(Action.PLAY_MUSIC);
		filter.addAction(Action.PAUSE_MUSIC);
		filter.addAction(Action.LAST_MUSIC);
		filter.addAction(Action.NAXT_MUSIC);
		filter.addAction(Action.USER_PROGRESS);
		filter.addAction(Action.SEND_NOTIFICATION);
		registerReceiver(receiver, filter);
	}
	/*定义广播*/
	public class Receiver extends BroadcastReceiver{
		@Override
		public void onReceive(Context context, Intent intent) {
			String action = intent.getAction();
			if(Action.PLAY_MUSIC.equals(action)){
				initMusic(listData.get(posstion));
			}else if(Action.PAUSE_MUSIC.equals(action)){
				pauseMusic();
			}else if(Action.NAXT_MUSIC.equals(action)){
				playNaxtMusic();
			}else if(Action.LAST_MUSIC.equals(action)){
				playLastMusic();
			}else if(Action.USER_PROGRESS.equals(action)){   //用户拖动进度条
				int seek = intent.getIntExtra(Action.USER_PROGRESS, 0);
				mMediaPlayer.seekTo(seek);
			}else if(Action.SEND_NOTIFICATION.equals(action)){
				reNotification();
			}
		}
	}

	/*发送广播*/
	public void reNotification(){
		NotificationCompat.Builder builder = new NotificationCompat.Builder(this);
		builder.setSmallIcon(R.drawable.icon_notification);
		RemoteViews remoteView = new RemoteViews(getPackageName(), R.layout.mp3_notification_layout);
		builder.setContent(remoteView);
		manager.notify(1, builder.build());
	}
	

	
}
